{"ast":null,"code":"import axios from \"axios\";\nimport { USER_LOGIN_SUCCESS, USER_LOGIN_FAIL, USER_REGISTER_FAIL, USER_REGISTER_SUCCESS, USER_AUTH_SUCCESS, USER_AUTH_FAIL, USER_LOGOUT_FAIL } from \"../constants/userConstants\";\nimport { push } from \"connected-react-router\";\n\nconst postExample = (title, body, userId) => async dispatch => {\n  try {\n    const {\n      data\n    } = await axios.post(\"https://jsonplaceholder.typicode.com/posts\", JSON.stringify({\n      title: title,\n      body: body,\n      userId: userId\n    }));\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response.data\n    });\n  }\n};\n\nconst getExample = () => async dispatch => {\n  try {\n    const {\n      data\n    } = await axios.get(\"/api/users/logout\");\n\n    if (!data) {\n      dispatch(push(\"/login\"));\n    }\n  } catch (error) {\n    dispatch({\n      type: USER_LOGOUT_FAIL,\n      payload: error.response.data\n    });\n  }\n};\n\nconst putExample = (userName, name, email, password) => async dispatch => {\n  try {\n    const {\n      data\n    } = await axios.post(\"/api/users/register\", {\n      userName,\n      name,\n      email,\n      password\n    }, {\n      withCredentials: true\n    });\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response.data\n    });\n  }\n};\n\nconst deleteExample = () => async dispatch => {\n  try {\n    const {\n      data\n    } = await axios.get(\"/api/users/user\");\n    dispatch({\n      type: USER_AUTH_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_AUTH_FAIL,\n      payload: error.response.data\n    });\n  }\n};\n\nexport { postExample, getExample, putExample, deleteExample };","map":{"version":3,"sources":["/home/euler/Documents/EgitimModulu/frontend/src/actions/exampleActions.js"],"names":["axios","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","USER_REGISTER_FAIL","USER_REGISTER_SUCCESS","USER_AUTH_SUCCESS","USER_AUTH_FAIL","USER_LOGOUT_FAIL","push","postExample","title","body","userId","dispatch","data","post","JSON","stringify","type","payload","error","response","getExample","get","putExample","userName","name","email","password","withCredentials","deleteExample"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport {\n  USER_LOGIN_SUCCESS,\n  USER_LOGIN_FAIL,\n  USER_REGISTER_FAIL,\n  USER_REGISTER_SUCCESS,\n  USER_AUTH_SUCCESS,\n  USER_AUTH_FAIL,\n  USER_LOGOUT_FAIL,\n} from \"../constants/userConstants\";\nimport { push } from \"connected-react-router\";\nconst postExample = (title, body, userId) => async (dispatch) => {\n  try {\n    const { data } = await axios.post(\n      \"https://jsonplaceholder.typicode.com/posts\",\n      JSON.stringify({\n        title: title,\n        body: body,\n        userId: userId,\n      })\n    );\n    dispatch({ type: USER_LOGIN_SUCCESS, payload: data });\n  } catch (error) {\n    dispatch({ type: USER_LOGIN_FAIL, payload: error.response.data });\n  }\n};\n\nconst getExample = () => async (dispatch) => {\n  try {\n    const { data } = await axios.get(\"/api/users/logout\");\n    if (!data) {\n      dispatch(push(\"/login\"));\n    }\n  } catch (error) {\n    dispatch({ type: USER_LOGOUT_FAIL, payload: error.response.data });\n  }\n};\n\nconst putExample = (userName, name, email, password) => async (dispatch) => {\n  try {\n    const { data } = await axios.post(\n      \"/api/users/register\",\n      { userName, name, email, password },\n      {\n        withCredentials: true,\n      }\n    );\n    dispatch({ type: USER_REGISTER_SUCCESS, payload: data });\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response.data,\n    });\n  }\n};\n\nconst deleteExample = () => async (dispatch) => {\n  try {\n    const { data } = await axios.get(\"/api/users/user\");\n    dispatch({ type: USER_AUTH_SUCCESS, payload: data });\n  } catch (error) {\n    dispatch({ type: USER_AUTH_FAIL, payload: error.response.data });\n  }\n};\nexport { postExample, getExample, putExample, deleteExample };\n"]},"metadata":{},"sourceType":"module"}